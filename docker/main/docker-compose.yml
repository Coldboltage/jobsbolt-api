version: '3.8'

services:
  traefik:
    image: traefik:v2.5
    container_name: jobsbolt-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.httpChallenge.entryPoint=web"
      - "--certificatesresolvers.le.acme.email=admin@jobsbolt.org"
      - "--certificatesresolvers.le.acme.storage=/acme.json"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./acme.json:/acme.json"
    networks:
      - jobsbolt_network
    deploy:
      replicas: 1  # Traefik as a single replica (you may scale if needed)
      placement:
        constraints:
          - node.role == manager  # Ensure Traefik runs only on the manager node

  jobsboltapi:
    image: coldbolt/jobsbolt-api:main-latest
    container_name: jobsbolt-api-main
    ports:
      - "3000:3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=le"
      - "traefik.http.services.api.loadbalancer.server.port=3000"
    env_file:
      - .env
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - jobsbolt_network
    deploy:
      replicas: 4  # Scale your API service
      update_config:
        parallelism: 1  # Update one replica at a time
        delay: 10s      # Wait 10 seconds between updates
      restart_policy:
        condition: on-failure  # Automatically restart failed tasks
      placement:
        preferences:
          - spread: node.role
        constraints:
          - node.platform.os == linux  # Ensure it only runs on Linux nodes

    jobsboltapi-manager:
      image: coldbolt/jobsbolt-api:main-latest
      container_name: jobsbolt-api-manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.api-manager.rule=PathPrefix(`/api`)"
        - "traefik.http.routers.api-manager.entrypoints=websecure"
        - "traefik.http.routers.api-manager.tls.certresolver=le"
      env_file:
        - .env
      networks:
        - jobsbolt_network
      deploy:
        replicas: 1  # Exactly one replica on the manager
        placement:
          constraints:
            - node.role == manager  # Ensure this runs only on the manager
        restart_policy:
          condition: on-failure


  jobsboltworker:
    image: coldbolt/jobsbolt-worker:latest
    container_name: jobsbolt-worker-main
    env_file:
      - .env
    depends_on:
      - postgres
      - rabbitmq
      - jobsboltapi
    networks:
      - jobsbolt_network
    deploy:
      replicas: 2  # Scale workers as needed
      restart_policy:
        condition: on-failure

  jobsboltwebsite:
    image: coldbolt/jobsbolt-website:main-latest
    container_name: jobsbolt-website-main
    ports:
      - "1337:1337"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jobsboltwebsite.rule=Host(`jobsbolt.org`) && !PathPrefix(`/api`)"
      - "traefik.http.services.jobsboltwebsite.loadbalancer.server.port=1337"
      - "traefik.http.routers.jobsboltwebsite.entrypoints=websecure"
      - "traefik.http.routers.jobsboltwebsite.tls.certresolver=le"
    env_file:
      - .env
    depends_on:
      - jobsboltapi
      - postgres
      - rabbitmq
    networks:
      - jobsbolt_network
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

networks:
  jobsbolt_network:
    driver: overlay  # Use overlay networks for Swarm mode

volumes:
  grafana-storage:
  acme.json:
    driver: local
